/***********************************************************************************************************************
 * Copyright [2015] Renesas Electronics Corporation and/or its licensors. All Rights Reserved.
 *
 * The contents of this file (the "contents") are proprietary and confidential to Renesas Electronics Corporation
 * and/or its licensors ("Renesas") and subject to statutory and contractual protections.
 *
 * Unless otherwise expressly agreed in writing between Renesas and you: 1) you may not use, copy, modify, distribute,
 * display, or perform the contents; 2) you may not use any name or mark of Renesas for advertising or publicity
 * purposes or in connection with your use of the contents; 3) RENESAS MAKES NO WARRANTY OR REPRESENTATIONS ABOUT THE
 * SUITABILITY OF THE CONTENTS FOR ANY PURPOSE; THE CONTENTS ARE PROVIDED "AS IS" WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
 * NON-INFRINGEMENT; AND 4) RENESAS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, OR CONSEQUENTIAL DAMAGES,
 * INCLUDING DAMAGES RESULTING FROM LOSS OF USE, DATA, OR PROJECTS, WHETHER IN AN ACTION OF CONTRACT OR TORT, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE CONTENTS. Third-party contents included in this file may
 * be subject to different terms.
 **********************************************************************************************************************/
/**********************************************************************************************************************
* File Name    : r_wdt.dox
* Description  : Extra documentation for WDT module
***********************************************************************************************************************
* History : DD.MM.YYYY Version Description
*           TODO WDT   1.00    Initial Release.
***********************************************************************************************************************/

/***********************************************************************************************************************
Functions
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_Open (wdt_ctrl_t * p_ctrl, wdt_cfg_t * p_cfg)
 * 
 * @code
    /* Example code */
    
    /* Create a variable for the error */
    ssp_err_t   err;

    /* Create a variable for the WDT control structure - this would normally be a global variable to hold WDT state. */
    wdt_ctrl_t g_wdt_ctrl;
    
    static const wdt_cfg_t g_wdt_cfg = 
	{ 
	    .start_mode     = WDT_START_MODE_REGISTER,
	    .autostart      = false, 
	    .timeout        = WDT_TIMEOUT_16384, 
	    .clock_division = WDT_CLOCK_DIVISION_8192, 
	    .window_start   = WDT_WINDOW_START_100,
	    .window_end     = WDT_WINDOW_END_0,
	    .reset_control  = WDT_RESET_CONTROL_RESET, 
	    .stop_control   =  WDT_STOP_CONTROL_DISABLE, 
	    .p_callback     = NULL,
	};

	/* Instance structure to use this module. */
	const wdt_instance_t g_wdt = 
	{ 
	    .p_ctrl = &g_wdt_ctrl, 
	    .p_cfg = &g_wdt_cfg,
	    .p_api = &g_wdt_on_wdt 
	};
    
    /* Open the WDT driver */    
    err = g_wdt.p_api->open(g_wdt.p_ctrl, (wdt_cfg_t * const)g_wdt.p_cfg);
        
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_CfgGet (wdt_ctrl_t * p_ctrl, wdt_cfg_t * p_cfg)
 * 
 * @code
    /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;

    /* Create a variable for the WDT configuration */
    wdt_cfg_t cfg;
    
    /* Read the configuration from the WDT */
    err = g_wdt.p_api->cfgGet(g_wdt.p_ctrl, &cfg);
        
 * @endcode
***********************************************************************************************************************/


/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_Refresh (wdt_ctrl_t * p_ctrl)
 * 
 * @code
    /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;

    /* Refresh the WDT */
    err = g_wdt.p_api->refresh(g_wdt.p_ctrl);
        
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_StatusGet (wdt_ctrl_t * p_ctrl, wdt_status_t * p_status)
 * 
 * @code
    /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;
    
    /* Create a variable for the status */
    wdt_status_t   status;
    
    /* Read the status */
    err = g_wdt.p_api->statusGet(g_wdt.p_ctrl, &status);
    
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_StatusClear (wdt_ctrl_t * p_ctrl, wdt_status_t status)
 * 
 * @code
   /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;
    
    /* Clear the refresh error status flag */
    err = g_wdt.p_api->statusClear(g_wdt.p_ctrl, WDT_STATUS_REFRESH_ERROR);
    
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_CounterGet (wdt_ctrl_t * p_ctrl, uint32_t * p_count)
 * 
 * @code
    /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;
    
    /* Create a variable for the count */
    uint32_t   count;
    
    /* Read the current counter value */
    err = g_wdt.p_api->counterGet(g_wdt.p_ctrl, &count);
    
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_TimeoutGet (wdt_ctrl_t * p_ctrl, wdt_timeout_values_t * p_timeout);
 * 
 * @code
    /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;
    
    /* Create a variable for the timeout information */
    wdt_timeout_values_t timeout;
    
    /* Read the timeout information */
    err = g_wdt.p_api->timeoutGet(g_wdt.p_ctrl, &timeout);
    
 * @endcode
***********************************************************************************************************************/

/*******************************************************************************************************************//**
 * @fn     ssp_err_t R_WDT_VersionGet (ssp_version_t * p_data)
 * 
 * @code
    /* Example code */
    /* This example assumes the driver has been opened successfully and the following variables exist: */
    /* See example R_WDT_Open() */
    extern const wdt_instance_t g_wdt;
    extern wdt_ctrl_t g_wdt_ctrl;
    
    /* Create a variable for the error */
    ssp_err_t   err;
    
    /* Create a variable for the version information */
    ssp_version_t   version;
    
    /* Read version information */
    err = g_wdt.p_api->versionGet(&version);
    
 * @endcode
***********************************************************************************************************************/
