<?xml version="1.0" ?>
<synergyModuleDescription>
    <config id="config.framework.sf_message" path="ssp_cfg/framework/sf_message_cfg.h" version="0">
        <property default="config.framework.sf_message.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_message.param_checking_enable">
            <option display="Default (BSP)" id="config.driver.sf_message.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.framework.sf_message.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.framework.sf_message.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>
            #include &quot;sf_message_port.h&quot;
            #define SF_MESSAGE_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_message.param_checking_enable}
        </content>
    </config>
    <module config="config.framework.sf_message" display="Framework|Services|${module.framework.sf_message.name} Messaging Framework on sf_message" id="module.framework.sf_message" version="1">
        <requires interface="_hal" />
        <provides interface="interface.framework.sf_message.${module.framework.sf_message.name}"/>
        <property default="g_sf_message" display="Name" id="module.framework.sf_message.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_message.name}")</constraint>
        </property>
        <property default="2048" display="Work memory size in bytes" id="module.framework.sf_message.work_memory_size">
            <constraint display="Value must be a non-negative integer">testInteger("${module.framework.sf_message.work_memory_size}")</constraint>
        </property>
        <property default="64" display="Message buffer size in bytes" id="module.framework.sf_message.buffer_size">
            <constraint display="Value must be a non-negative integer">testInteger("${module.framework.sf_message.buffer_size}")</constraint>
        </property>
        <property default="p_subscriber_lists" display="Pointer to subscriber list array" id="module.framework.sf_message.pp_subscriber_lists">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_message.pp_subscriber_lists}")</constraint>
        </property>
        <property default="sf_msg_blk_pool" display="name of the block pool internally used in the messaging framework" id="module.framework.sf_message.p_blk_pool_name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_message.p_blk_pool_name}")</constraint>
        </property>
        <header>
            /* SF Message on SF Message Instance. */
            extern const sf_message_instance_t ${module.framework.sf_message.name};
        </header>
        <includes>
            #include &quot;sf_message.h&quot;
        </includes>
        <declarations>
            extern sf_message_subscriber_list_t * ${module.framework.sf_message.pp_subscriber_lists}[];
            sf_message_ctrl_t ${module.framework.sf_message.name}_ctrl;
            static uint8_t    ${module.framework.sf_message.name}_work_buffer[${module.framework.sf_message.work_memory_size}];
            /* Configures the messaging framework */
            sf_message_cfg_t ${module.framework.sf_message.name}_cfg =
            {
                .p_work_memory_start    = &amp;${module.framework.sf_message.name}_work_buffer,
                .work_memory_size_bytes = ${module.framework.sf_message.work_memory_size},
                .buffer_size            = ${module.framework.sf_message.buffer_size},
                .pp_subscriber_lists    = ${module.framework.sf_message.pp_subscriber_lists},
                .p_block_pool_name      = (uint8_t *)"${module.framework.sf_message.p_blk_pool_name}"
            };
            /* Instance structure to use this module. */
            const sf_message_instance_t ${module.framework.sf_message.name} = 
            {
                .p_ctrl        = &amp;${module.framework.sf_message.name}_ctrl,
                .p_cfg         = &amp;${module.framework.sf_message.name}_cfg,
                .p_api         = &amp;g_sf_message_on_sf_message
            };  
        </declarations>
        <init>
            ssp_err_t err_${module.framework.sf_message.name};

            /* Opens the messaging framework */
            err_${module.framework.sf_message.name} = ${module.framework.sf_message.name}.p_api->open(${module.framework.sf_message.name}.p_ctrl, ${module.framework.sf_message.name}.p_cfg);
            if (SSP_SUCCESS != err_${module.framework.sf_message.name})
            {
                /* Error returns, check the cause. */
                while (1);
            }
        </init>
    </module>
</synergyModuleDescription>
