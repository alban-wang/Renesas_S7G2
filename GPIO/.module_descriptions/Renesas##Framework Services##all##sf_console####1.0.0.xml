<?xml version="1.0" ?>
<synergyModuleDescription>
	<config id="config.framework.sf_console" path="ssp_cfg/framework/sf_console_cfg.h" version="0">
		<property default="config.framework.sf_console.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_console.param_checking_enable">
            <option display="Default (BSP)" id="config.driver.sf_audio_playback.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
			<option display="Enabled" id="config.framework.sf_console.param_checking_enable.enabled" value="(1)"/>
			<option display="Disabled" id="config.framework.sf_console.param_checking_enable.disabled" value="(0)"/>
		</property>
		<content>#define SF_CONSOLE_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_console.param_checking_enable}
</content>
	</config>
	<module config="config.framework.sf_console" display="Framework|Services|${module.framework.sf_console.name} Console Framework on sf_console" id="module.framework.sf_console" version="1">
        <constraint display="Requires one Communications Framework instance named ${module.framework.sf_console.lowerlevelname}">
            "${interface.framework.sf_comms.${module.framework.sf_console.lowerlevelname}}" === "1"
        </constraint>
        <requires interface="interface.framework.sf_comms.${module.framework.sf_console.lowerlevelname}" />
        <requires interface="_rtos" />
        <provides interface="interface.framework.sf_console.${module.framework.sf_console.name}" />
        <property default="g_sf_console" display="Name" id="module.framework.sf_console.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_console.name}")</constraint>
        </property>
        <property id="module.framework.sf_console.lowerlevelname" display="Lower Level Name" default="g_sf_comms">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_console.lowerlevelname}")</constraint>
        </property>
        <property id="module.framework.sf_console.initial_menu" display="Name of Initial Menu (Application Defined)" default="g_sf_console_root_menu">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_console.initial_menu}")</constraint>
        </property>
		<property default="module.framework.sf_console.echo.true" display="Echo" id="module.framework.sf_console.echo">
			<option display="True" id="module.framework.sf_console.echo.true" value="true"/>
			<option display="False" id="module.framework.sf_console.echo.false" value="false"/>
		</property>
		<property default="module.framework.sf_console.autostart.false" display="Autostart" id="module.framework.sf_console.autostart">
			<option display="True" id="module.framework.sf_console.autostart.true" value="true"/>
			<option display="False" id="module.framework.sf_console.autostart.false" value="false"/>
		</property>
        <header>
            extern const sf_console_instance_t ${module.framework.sf_console.name};
            extern const sf_console_menu_t ${module.framework.sf_console.initial_menu};
        </header>
		<includes>#include &quot;sf_console.h&quot;
#include &quot;sf_console_api.h&quot;</includes>
		<declarations>sf_console_ctrl_t ${module.framework.sf_console.name}_ctrl;
const sf_console_cfg_t ${module.framework.sf_console.name}_cfg =
{
    .p_comms             = &amp;${module.framework.sf_console.lowerlevelname},
    .p_initial_menu      = &amp;${module.framework.sf_console.initial_menu},
    .echo                = ${module.framework.sf_console.echo},
    .autostart           = ${module.framework.sf_console.autostart},
};
/* Instance structure to use this module. */
const sf_console_instance_t ${module.framework.sf_console.name} = 
{
    .p_ctrl        = &amp;${module.framework.sf_console.name}_ctrl,
    .p_cfg         = &amp;${module.framework.sf_console.name}_cfg,
    .p_api         = &amp;g_sf_console_on_sf_console
};
</declarations>
        <init>
            ssp_err_t ssp_err_${module.framework.sf_console.name};
            ssp_err_${module.framework.sf_console.name} = ${module.framework.sf_console.name}.p_api->open(${module.framework.sf_console.name}.p_ctrl, ${module.framework.sf_console.name}.p_cfg);
            if (SSP_SUCCESS != ssp_err_${module.framework.sf_console.name})
            {
                while (1);
            }
        </init>
	</module>
</synergyModuleDescription>
